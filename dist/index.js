import e from"debug";function t(e,t,s,i){return new(s||(s=Promise))((function(n,r){function a(e){try{h(i.next(e))}catch(e){r(e)}}function o(e){try{h(i.throw(e))}catch(e){r(e)}}function h(e){var t;e.done?n(e.value):(t=e.value,t instanceof s?t:new s((function(e){e(t)}))).then(a,o)}h((i=i.apply(e,t||[])).next())}))}const s=e=>{const t=new Uint8Array(e);window.crypto.getRandomValues(t);return i(t)},i=e=>{const t=new Uint8Array(e),s=[];for(let e=0;e<t.length;e++){const i=`00${t[e].toString(16)}`.slice(-2);s.push(i)}return s.join("")};var n;!function(e){e.Req="Req",e.Resp="Resp",e.RespError="RespError",e.Notify="Notify"}(n||(n={}));class r{static createReq(e,t){return{msgId:s(16),method:e,data:t,type:n.Req,pathname:location.pathname}}static createResp(e,t,s){return{msgId:t,method:e,data:s,type:n.Resp,pathname:location.pathname}}static createRespError(e,t,s){return{msgId:t,method:e,data:{},error:s,type:n.RespError,pathname:location.pathname}}static createNotify(e,t){return{msgId:s(16),method:e,data:t,type:n.Notify,pathname:location.pathname}}}class a{constructor(t){var s,i,n;this._requestedMap=new Map,this._logger=e("smart-pmsg"),this._establishTimeout=null!==(s=null==t?void 0:t.establishTimeout)&&void 0!==s?s:3e4,this._establishInterval=null!==(i=null==t?void 0:t.establishInterval)&&void 0!==i?i:500,this._targetOrigin=t.targetOrigin,this._targetPathname=t.targetPathname||"*",this._currentWindow=t.currentWindow,this._targetWindow=t.targetWindow,this._logPrefix=null!==(n=t.logPrefix)&&void 0!==n?n:" ✉️✉️✉️ ",this._subscribeFunc=new Map,this._observeFunc=new Map,this._logger,e(this._logPrefix),this._closed=!0,this._startConnect=0,this.handleSubscription=this.handleSubscription.bind(this),this._currentWindow.addEventListener("message",this.handleSubscription)}setTimeout(e){this._establishTimeout=e}establish(e){return t(this,void 0,void 0,(function*(){return this._startConnect=Date.now(),new Promise(((t,s)=>e?this._parentEstablish(t,s):this._sonEstablish(t,s)))}))}_sonEstablish(e,t){let s=null;const i=t=>{if("syncSent"===t.data)return this._logger("ESTABLISH >> SON >> RECV: syncSent,  SEND: syncRecv"),void this._targetWindow.postMessage("syncRecv",this._targetOrigin);"establish"===t.data&&(this._logger("ESTABLISH >> SON >> ESTABLISH"),s&&(clearTimeout(s),s=null),this._currentWindow.removeEventListener("message",i),this._closed=!1,e(1))};this._currentWindow.addEventListener("message",i),s=setTimeout((()=>{this._currentWindow.removeEventListener("message",i),t("connect failed")}),this._establishTimeout)}_parentEstablish(e,t){let s=null,i=null;const n=t=>{"syncRecv"===t.data&&(s&&(clearTimeout(s),s=null),i&&(clearTimeout(i),s=null),this._logger("ESTABLISH >> PARENT >> FINISH. NOTIFY: establish"),this._targetWindow.postMessage("establish",this._targetOrigin),this._closed=!1,e(1))};i=setTimeout((()=>{this._currentWindow.removeEventListener("message",n),t("connect failed")}),this._establishTimeout),s=setTimeout((()=>{i&&(clearTimeout(i),s=null),this._currentWindow.removeEventListener("message",n),this._parentEstablish(e,t)}),this._establishInterval),this._currentWindow.addEventListener("message",n,{once:!0}),this._logger("ESTABLISH >> PARENT >> SEND: syncSent"),this._targetWindow.postMessage("syncSent",this._targetOrigin)}_send(e){this._targetWindow.postMessage(e,"*")}request(e,s=null){return t(this,void 0,void 0,(function*(){if(this._logger(`[SEND-REQ] [${e}] | args`,s),this._closed)throw new Error("postMessage has been closed.");const t=r.createReq(e,s);return new Promise(((e,s)=>{this._requestedMap.set(t.msgId,{data:t,reject:s,resolve:e}),this._send(t)}))}))}notify(e,t=null){this._logger(`[SEND-NOTIFY] [${e}] | args`,t);const s=r.createNotify(e,t);this._send(s)}subscribe(e,t){this._subscribeFunc.has(e)||this._subscribeFunc.set(e,[]);const s=this._subscribeFunc.get(e);return s.push(t),()=>{const e=s.indexOf(t);e>-1&&s.splice(e,1)}}unsubscribe(e){this._subscribeFunc.delete(e)}observe(e,t){this._observeFunc.has(e)||this._observeFunc.set(e,[]);this._observeFunc.get(e).push(t)}unobserve(e){this._observeFunc.delete(e)}handleSubscription(e){if(e.data.method&&!(e.origin!==this._targetOrigin&&"*"!==this._targetOrigin||e.data.pathname!==this._targetPathname&&"*"!==this._targetPathname))switch(e.data.type){case n.Req:this.handleReq(e.data);break;case n.Resp:case n.RespError:this.handleResp(e.data);break;case n.Notify:this.handleNotify(e.data)}}handleReq(e){return t(this,void 0,void 0,(function*(){const{msgId:t,method:s}=e,i=this._observeFunc.get(s);if(i){this._logger(`[RECV-REQ] [${s}] | event`,e);for(const n of i)try{const i=yield n(e),a=r.createResp(s,t,i);this._send(a)}catch(e){const i=r.createRespError(s,t,e);this._send(i)}}}))}handleResp(e){const{msgId:t}=e,s=this._requestedMap.get(t);s&&(this._logger("[RECV-RESP] | event",e),e.error?s.reject(e.error):s.resolve(e.data),this._requestedMap.delete(t))}handleNotify(e){const{method:t}=e,s=this._subscribeFunc.get(t);if(s&&0!==s.length){this._logger(`[RECV-NOTIFY] [${t}]| event: `,e);for(let t=0;t<(null==s?void 0:s.length);t++)s[t](e.data)}}finish(){return t(this,void 0,void 0,(function*(){this._logger("CONNECTION FINISHED."),this._currentWindow.removeEventListener("message",this.handleSubscription),this._closed=!0}))}}export{a as default};
